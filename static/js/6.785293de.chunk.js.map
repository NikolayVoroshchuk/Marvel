{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.jsx","components/charList/CharList.jsx","components/charInfo/CharInfo.jsx","components/searchChar/SearchChar.jsx","components/errorBoundary/ErrorBoundary.jsx","resources/img/vision.png","pages/MainPage.jsx","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.jsx","services/MarvelService.jsx","hooks/http.hook.jsx","components/skeleton/Skeleton.jsx","utils/setContent.jsx"],"names":["View","data","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharList","onCharSelected","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","includes","tabIndex","ref","el","onKeyPress","e","key","renderItems","disabled","newComics","comics","slice","searcUrl","resourceURI","match","join","to","CharInfo","props","charId","CharSearchForm","getCharacterByName","errorMessage","results","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","ErrorBoundary","state","error","errorInfo","this","setState","children","MainPage","selectedChar","Helmet","content","decoration","display","width","height","objectFit","margin","img","API_BASE","API_KEY","request","useCallback","url","a","method","body","headers","fetch","response","ok","status","json","useHttp","_baseOffset","res","_transformCharacter","getAllComics","_transformComics","getComics","path","extension","urls","title","pageCount","language","textObjects","price","prices","Skeleton"],"mappings":"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","file":"static/js/6.785293de.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png'\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const onCharLoaded = (char) => setChar(char);\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n}\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki } = data;\n    let imgStyle = { 'objectFit': 'cover' };\n    if ((thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg')) {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","/* eslint-disable no-unreachable */\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner />;\n        case 'loading':\n            return newItemLoading ? <Component /> : <Spinner />;\n        case 'confirmed':\n            return <Component />;\n        case 'error':\n            return <ErrorMessage />;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = ({ onCharSelected }) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(302);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { getAllCharacters, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(setNewItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended)\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail.includes('image_not_available')) {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n\n            return (\n                <li\n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading)\n        // eslint-disable-next-line\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.charId])\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => setChar(char);\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = data;\n    const newComics = comics.slice(0, 10);\n\n    const searcUrl = newComics.map(item => {\n        return item.resourceURI.match(/\\d/g).join('').slice(1);\n    });\n\n\n    let imgStyle = { 'objectFit': 'cover' };\n    if ((thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg')) {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {newComics.length > 0 ? null : 'There is no comics this character'}\n                {\n                    newComics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <Link to={`/comics/${searcUrl[i]}`} key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </Link>\n                        )\n                    })\n                }\n\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { useState } from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './SearchChar.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const { getCharacterByName, clearError, process, setProcess } = useMarvelService();\n\n    const onCharLoaded = (char) => setChar(char);\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n        <div className=\"char__search-wrapper\">\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n            <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                <div className=\"inner\">To page</div>\n            </Link>\n        </div> :\n        <div className=\"char__search-error\">\n            The character was not found. Check the name and try again\n        </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues={{\n                    charName: ''\n                }}\n                validationSchema={Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit={({ charName }) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field\n                            id=\"charName\"\n                            name='charName'\n                            type='text'\n                            placeholder=\"Enter name\" />\n                        <button\n                            type='submit'\n                            className=\"button button__main\"\n                            disabled={process === 'loading'}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { Component } from 'react';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false,\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({ error: true });\n    }\n\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage />\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport RandomChar from \"../components/randomChar/RandomChar\";\nimport CharList from \"../components/charList/CharList\";\nimport CharInfo from \"../components/charInfo/CharInfo\";\nimport SearchChar from \"../components/searchChar/SearchChar\";\nimport ErrorBoundary from \"../components/errorBoundary/ErrorBoundary\";\n\nimport decoration from '../resources/img/vision.png';\n\nconst MainPage = () => {\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => setChar(id);\n\n    return (\n        <>\n            <Helmet>\n                <meta name=\"description\" content=\"Web site created using create-react-app\" />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar />\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected} />\n                </ErrorBoundary>\n                <div className=\"char__info-search\" style={{ \"position\": \"sticky\", \"top\": \"0\" }}>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar} />\n                    </ErrorBoundary>\n                    <SearchChar />\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n        </>\n    )\n}\n\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\nconst ErrorMessage = () => {\n    return (\n        <img style={{\n            display: 'block',\n            width: '250px',\n            height: '250px',\n            objectFit: 'contain',\n            margin: '0 auto'\n        }}\n            src={img}\n            alt=\"Error Message\" />\n    )\n}\n\nexport default ErrorMessage;","import { useHttp } from '../hooks/http.hook';\n\nconst API_BASE = process.env.REACT_APP_API_BASE;\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst useMarvelService = () => {\n    const { request, clearError, process, setProcess } = useHttp();\n\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${API_BASE}characters?limit=9&offset=${offset}&${API_KEY}`);\n        return res.data.results.map(_transformCharacter)\n    }\n    const getCharacterByName = async (name) => {\n        const res = await request(`${API_BASE}characters?name=${name}&${API_KEY}`);\n        return res.data.results.map(_transformCharacter);\n    }\n    const getCharacter = async (id) => {\n        const res = await request(`${API_BASE}characters/${id}?${API_KEY}`);\n        return _transformCharacter(res.data.results[0])\n    }\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${API_BASE}comics?limit=8&offset=${offset}&${API_KEY}`);\n        return res.data.results.map(_transformComics)\n    }\n    const getComics = async (id) => {\n        const res = await request(`${API_BASE}comics/${id}?${API_KEY}`);\n        return _transformComics(res.data.results[0])\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language: comics.textObjects.language || 'en-us',\n            price: comics.prices[0].price ? `${comics.prices[0].price} $` : 'Not available',\n        }\n    }\n\n    return {\n        clearError,\n        process,\n        setProcess,\n        getAllCharacters,\n        getCharacter,\n        getCharacterByName,\n        getAllComics,\n        getComics\n    }\n}\nexport default useMarvelService;","import { useState, useCallback } from 'react';\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting')\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-type': 'application/json' }) => {\n\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, { method, body, headers })\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n        } catch (err) {\n            setProcess('error');\n            throw err;\n        }\n    }, []);\n\n    const clearError = useCallback(() => setProcess('loading'), []);\n\n    return { request, clearError, process, setProcess };\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton'\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton />;\n        case 'loading':\n            return <Spinner />;\n        case 'confirmed':\n            return <Component data={data} />;\n        case 'error':\n            return <ErrorMessage />;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nexport default setContent;"],"sourceRoot":""}